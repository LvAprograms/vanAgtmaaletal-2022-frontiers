from matplotlib import pyplot as plt
from numpy import array
from matplotlib.ticker import MultipleLocator


BASE_PATH = "C:\\Users\\luukv\\Documents\\Studie\\Masters\\Jaar2\\MSc_thesis\\PAPER\\REVIEW_round1\\forcedata_accurate\\"
SAVE_PATH = "C:\\Users\luukv\\Documents\\Studie\\Masters\\Jaar2\\MSc_thesis\\PAPER\\REVIEW_round1\\ExtraFigs\\"

# dictionary to hold colours and labels for each model_id to prevent mistakes.
MODEL_DICT_COLOURS = {
    "ER": ['r', 'ref'], "ER_rerun": ['r', 'ref'], "FI": ['b', 'oc510'], "FI_shortpush": [(0, 0, 0.67), 'oc510sp'], "FJ": ['k', 'oc410'],
    "FK": ['g', 'oc310'], "FP_rerun": [(1, 153 / 255, 153 / 255), 'peierls'], "FQ": ['c', 'LM25'],
    "FR": ['y', 'LM50'],
    "FS": ['m', 'LM75'], "FT": [(139 / 255, 69 / 255, 19 / 255), 'LMoc510'], "FX": [(0.8, 0.8, 0.8), "slowref"],
    "reffree": [(80 / 255, 30 / 255, 220 / 255), "reffree"],
    "reflong": [(120 / 255, 210 / 255, 40 / 255), "reflong"],
    "ref5cm": [(58 / 255, 0 / 255, 123 / 255), 'ref5cm']
}


def cm_to_inch(val: float):
    return val * 0.393700787


def plot_slab_pull_data(model_id: str, overlay=False):
    """
    Function to plot the slab pull and area time sries contained in the *_SPdata.txt files generated by the
    `ForceAnalysis.m` Matlab script.
    :param model_id: name of the model to plot
    :param overlay: boolean switch to return either the data arrays or plot just one model
    :return: time, slab_pull and slab_area arrays when `overlay = True`, otherwise the fig and axis handles.
    """
    time_list = []
    slab_pull_list = []
    slab_area_list = []

    with open("{}{}_SPdata.txt".format(BASE_PATH, model_id), 'r') as f:
        for line in f.readlines():
            if line.startswith('time'):
                pass
            else:
                data = line.split()
                if float(data[0]) / 1e6 < 0.01:
                    pass
                else:
                    time_list.append(float(data[0]) / 1e6)  # append time in million years
                    slab_pull_list.append(float(data[1]))
                    slab_area_list.append(float(data[2]))
    if overlay:
        return array(time_list), array(slab_pull_list), array(slab_area_list)
    else:
        sp_fig, sp_axes = plt.subplots(2, figsize=(8, 4.0))
        # cm_to_inch(14.0), cm_to_inch(15.2))
        sp_axes[0].plot(time_list, slab_pull_list, 'r*-', label=model_id)
        sp_axes[1].plot(time_list, slab_area_list, 'r*-', label=model_id)

        # Format the major and minor ticks of the slab pull and area plot
        for sp_axis in sp_axes:
            sp_axis.xaxis.set_major_locator(MultipleLocator(10))
            sp_axis.xaxis.set_major_formatter('{x:.0f}')
            sp_axis.xaxis.set_minor_locator(MultipleLocator(5))

        # Label plots and disable grid
        sp_axes[1].set_xlabel('Time [Myr]')
        sp_axes[0].set_ylabel('Slab pull force [N/m]')
        sp_axes[1].set_ylabel(r'Slab area [$m^2$]')
        sp_axes[0].grid(b=True)
        sp_axes[1].grid(b=True)

        return sp_fig, sp_axes


if __name__ == "__main__":
    # Models = ["ER", "reffree", "reflong"]

    # "ER", 'FI', 'FJ', 'FK', 'FP_rerun', 'FQ', 'FR', 'FS', 'FT', 'FX',
    # Models = ["ER", "FQ", "FR", "FS", "FT"]
    # Models = ["ER", "FI", "FJ", "FK"]
    # Models = ["FP"]
    Models = ["ER_rerun"]
    filename = "ref_redo"
    # filename = "oceanlength_old"
    # filename = "reffree_slabpull"
    # fig, ax = plot_SP_data("ER", overlay=False)
    fig, ax = plt.subplots(2, figsize=(8, 3.5))
    for axis in ax:
        axis.xaxis.set_major_locator(MultipleLocator(10))
        axis.xaxis.set_major_formatter('{x:.0f}')
        axis.xaxis.set_minor_locator(MultipleLocator(5))
    for i, model in enumerate(Models):
        time, slab_pull, slab_area = plot_slab_pull_data(model, overlay=True)
        if model != "ER":
            ax[0].plot(time, slab_pull, '-', color=MODEL_DICT_COLOURS[model][0],
                       label=MODEL_DICT_COLOURS[model][1])
            ax[1].plot(time, slab_area, '-', color=MODEL_DICT_COLOURS[model][0])
            print("Peak slab pull of {:.3e} N/m reached at t = {}, Peak area {} m2 at t = {} for model_id {}".format(
                min(slab_pull), time[slab_pull.argmin()], max(slab_area),
                time[slab_area.argmax()], model)
            )
        else:
            ax[0].plot(time, slab_pull, '-', color=MODEL_DICT_COLOURS[model][0], marker='*',
                       label=MODEL_DICT_COLOURS[model][1])
            ax[1].plot(time, slab_area, '-', color=MODEL_DICT_COLOURS[model][0], marker='*')
            print("Peak slab pull of {:.3e} N/m reached at t = {}, Peak area {} m2 at t = {} for model_id {}".format(
                min(slab_pull), time[slab_pull.argmin()], max(slab_area), time[slab_area.argmax()], model)
            )
    # Set right labels, axis limits, plot a zero dashed line
    ax[1].set_xlabel('Time [Myr]')
    ax[0].set_ylabel('Slab pull force [N/m]')
    ax[1].set_ylabel(r'Slab area [$m^2$]')
    [_.set_xlim([0, 115]) for _ in ax] if "FX" in Models else [_.set_xlim([0, 60]) for _ in ax]
    ax[0].set_ylim([-4.7e14, 0.8e14]) if "FX" in Models or "reffree" in Models else ax[0].set_ylim([-1.7e14, 0.7e14])
    ax[0].plot([0, 120], [0, 0], 'k:', linewidth=2)
    ax[1].set_ylim([0, 8.1e11]) if "FX" in Models else ax[1].set_ylim([0, 5e11])
    ax[0].legend(bbox_to_anchor=(0.5, 1.25), ncol=5, loc='upper center', borderaxespad=0.1, fancybox=True)
    # plt.gca().set_axis_off()
    plt.subplots_adjust(top=1, bottom=0, right=1, left=0,
                        hspace=0.2, wspace=0)
    plt.margins(0, 0)
    plt.savefig('{}{}.png'.format(SAVE_PATH, filename), bbox_inches='tight', pad_inches=0, dpi=300)
